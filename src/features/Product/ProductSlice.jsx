import { createAsyncThunk, createSlice } from "@reduxjs/toolkit"
import {
  fetchProductsByFilter,
  fetchCategories,
  fetchBrands,
  fetchProductById,
} from "./ProductAPI"

const initialState = {
  products: [],
  brands: [],
  categories: [],
  status: "idle",
  totalItems: 0,
  slectedProduct: null,
}

// This is action we created

export const fetchProductsByFilterAsync = createAsyncThunk(
  "product/fetchProductsByFilter",
  async ({ filter, pagination }) => {
    const response = await fetchProductsByFilter(filter, pagination)
    return response.data
  },
)
export const fetchCategoriesAsync = createAsyncThunk(
  "product/fetchCategories",
  async () => {
    const response = await fetchCategories()
    return response.data
  },
)
export const fetchBrandsAsync = createAsyncThunk(
  "product/fetchBrands",
  async () => {
    const response = await fetchBrands()
    return response.data
  },
)
export const fetchProductByIdAsync = createAsyncThunk(
  "product/fetchProductById",
  async (id) => {
    const response = await fetchProductById(id)
    return response.data
  },
)

export const productSlice = createSlice({
  name: "product",
  initialState,
  reducers: {
    increment: (state) => {
      state.value += 1
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchProductsByFilterAsync.pending, (state) => {
        state.status = "loading"
      })
      .addCase(fetchProductsByFilterAsync.fulfilled, (state, action) => {
        state.status = "completed"
        state.products = action.payload.products
        state.totalItems = action.payload.totalItems
      })
      .addCase(fetchCategoriesAsync.pending, (state) => {
        state.status = "loading"
      })
      .addCase(fetchCategoriesAsync.fulfilled, (state, action) => {
        state.status = "completed"
        state.categories = action.payload
      })
      .addCase(fetchBrandsAsync.pending, (state) => {
        state.status = "loading"
      })
      .addCase(fetchBrandsAsync.fulfilled, (state, action) => {
        state.status = "completed"
        state.brands = action.payload
      })
      .addCase(fetchProductByIdAsync.pending, (state) => {
        state.status = "loading"
      })
      .addCase(fetchProductByIdAsync.fulfilled, (state, action) => {
        state.status = "completed"
        state.slectedProduct = action.payload
      })
  },
})

export const selectAllProducts = (state) => state.product.products
export const selectAllItems = (state) => state.product.totalItems

export const selectBrands = (state) => state.product.brands
export const selectCategories = (state) => state.product.categories

export const selectProductById = (state) => state.product.slectedProduct

export default productSlice.reducer
